@using TravelHub.Domain.Entities
@model TravelHub.Web.ViewModels.Trips.DayDetailViewModel
@{
    bool isGroup = Model.Number == null;
    ViewData["Title"] = isGroup ? "Group Details" : $"Day {Model.Number} Details";
    var apiKey = ViewData["GoogleApiKey"];
    var startLat = ViewData["Latitude"];
    var startLng = ViewData["Longitude"];
}

<h1>@ViewData["Title"]</h1>

<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
            @if (isGroup)
            {
                <span class="badge bg-info ms-2">Group</span>
            }
        </dd>

        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Date)
        </dt>
        <dd class="col-sm-10">
            @Model.Date.ToString("D")
        </dd>

        <dt class="col-sm-2">
            Trip
        </dt>
        <dd class="col-sm-10">
            @Model.Trip?.Name
        </dd>
    </dl>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
        <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row">
    <div class="col-md-8">
        <div>
            <h2>Map</h2>
            <p>Api Key: @apiKey</p>
            <div id="map" style="height:500px;width:100%;margin-top:10px;"></div>
            <button id="route-walk-btn">Find walking route</button>
            <button id="route-drive-btn">Find car route</button>
            <button id="route-transit-btn">Find route with public transportation</button>
        </div>
    </div>
    <!-- Spots -->
    <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">Spots (@(Model.Spots.Count()))</h5>
                <a asp-controller="Spots" asp-action="AddToTrip" asp-route-tripId="@Model.Trip!.Id" asp-route-dayId="@Model.Id" class="btn btn-sm btn-success">Add Spot</a>
            </div>
            <div class="card-body">
                @if (Model.Spots.Any())
                {
                    <div class="list-group">
                        @{
                            int i = 0;
                        }
                        @foreach (var spot in Model.Spots)
                        {
                            <div class="list-group-item" id="spot-@i">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1">@spot.Name</h6>
                                        <p class="mb-1 small text-muted">@spot.Description</p>
                                        <div class="small">
                                            <span class="badge bg-light text-dark">@spot.Duration h</span>
                                            <span class="badge bg-warning">$@spot.Cost</span>
                                            @if (spot.CategoryName != null)
                                            {
                                                <span class="badge bg-secondary">@spot.CategoryName</span>
                                            }
                                            <br>
                                            <small class="text-muted">
                                                📍 @spot.Latitude.ToString("F4"), @spot.Longitude.ToString("F4")
                                            </small>
                                        </div>
                                    </div>
                                    <div class="btn-group ms-2 flex-shrink-0">
                                        <a asp-controller="Spots" asp-action="Details" asp-route-id="@spot.Id" class="btn btn-sm btn-outline-primary">View</a>
                                        <a asp-controller="Spots" asp-action="Edit" asp-route-id="@spot.Id" class="btn btn-sm btn-outline-secondary">Edit</a>
                                        <form asp-controller="Spots" asp-action="Delete" asp-route-id="@spot.Id" method="post" class="d-inline">
                                            <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this spot?')">Delete</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            i++;
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">No spots added to this trip yet.</p>
                    <a asp-controller="Spots" asp-action="AddToTrip" asp-route-tripId="@Model.Id" class="btn btn-sm btn-success">Add Spot</a>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script async
            src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places&callback=initMap">
    </script>

    <script>
        let map;
        // let points = @Json.Serialize(Model.Spots);
        let pointsJson = '@Json.Serialize(Model.Spots)';
        let points = JSON.parse(pointsJson);
        let center = { lat: parseFloat("@Html.Raw(startLat)".replace(',', '.')), lng: parseFloat("@Html.Raw(startLng)".replace(',', '.')) };
        let polylines = [];

        async function initMap() {
            // Request needed libraries.
            const { Place } = await google.maps.importLibrary("places");
            const {AdvancedMarkerElement} = await google.maps.importLibrary("marker");

            // Initialize the map.
            map = new google.maps.Map(document.getElementById("map"), {
                    center: center,
                    zoom: 12,
                    //TODO: Create map id
                    mapId: 'DEMO_MAP_ID'
            });
            marker = new AdvancedMarkerElement({
               map,
            });
            infoWindow = new google.maps.InfoWindow({});

            points.forEach((point, i) => {
              let coords = {lat: parseFloat(point.latitude), lng: parseFloat(point.longitude)}
              
              if (point.order == 0) {
                  var iconImage = new google.maps.marker.PinElement({});
              } else {
                  let glyphLabel = document.createElement("div");
                  // set style and classes as needed
                  glyphLabel.style = 'color: white; font-size: 17px;';
                  glyphLabel.innerText = i + 1;
                  var iconImage = new google.maps.marker.PinElement({
                    glyph: glyphLabel,
                  });
              }
              const marker = new AdvancedMarkerElement({
                    position: coords,
                    map: map,
                    title: point.name,
                    content: iconImage.element,
              });

              // Add a click listener for each marker, and set up the info window.
              marker.addListener("click", () => {
                  if (infoWindow.isOpen && infoWindow.anchor == marker) {
                      infoWindow.close();
                  } else if(infoWindow.anchor != marker) {
                      infoWindow.close();
                      infoWindow.setContent(marker.title);
                      infoWindow.open(map, marker);
                  } else {
                      infoWindow.setContent(marker.title);
                      infoWindow.open(map, marker);
                  }
              });

              let listElem = document.getElementById("spot-" + i);
              listElem.addEventListener("mouseenter", (event) => {
                  infoWindow.close();
                  infoWindow.setContent(marker.title);
                  infoWindow.open(map, marker);
              });

              listElem.addEventListener("mouseleave", (event) => {
                  infoWindow.close();
              });

              marker.addEventListener('mouseenter', (event) => {
                  listElem.classList.add("selected-item");
              });

              marker.addEventListener('mouseleave', (event) => {
                  listElem.classList.remove("selected-item");
              });

            });


            let walkRouteBtn = document.getElementById("route-walk-btn");
            walkRouteBtn.addEventListener('click', (event) => {showRoute('WALKING')});

            let driveRouteBtn = document.getElementById("route-drive-btn");
            driveRouteBtn.addEventListener('click', (event) => {showRoute('DRIVING')});

            let transitRouteBtn = document.getElementById("route-transit-btn");
            transitRouteBtn.addEventListener('click', (event) => {showRoute('TRANSIT')});
        }



        async function showRoute(travelMode){
            const {Polyline} = await google.maps.importLibrary("maps");

            if (travelMode == 'WALKING' || travelMode == 'DRIVING'){
                route = await getRoute(points[0], points[points.length - 1],
                    intermediates=points.slice(1,-1).map((point) => { return {lat:  parseFloat(point.latitude), lng:  parseFloat(point.longitude)} }),
                    travelMode=travelMode);
                clearPolylines();
                const polyline = new Polyline({
                    map: map,
                    path: route.routes[0].path,
                });
                polylines.push(polyline);
            } else if (travelMode == 'TRANSIT') {
                route = await getRoute(points[0], points[points.length - 1],
                    intermediates=points.slice(1,-1).map((point) => { return {lat:  parseFloat(point.latitude), lng:  parseFloat(point.longitude)} }),
                    travelMode='WALKING',
                    fields=['durationMillis', 'distanceMeters','path', 'legs']);
                clearPolylines();

                for (let i = 0; i < route.routes[0].legs.length; i++) {
                    let leg = route.routes[0].legs[i];
                    if (leg.durationMillis > 30 * 60 * 1000){
                        transitRoute = await getRoute({latitude: leg.startLocation.lat, longitude: leg.startLocation.lng },
                            {latitude: leg.endLocation.lat, longitude: leg.endLocation.lng },
                            intermediates=[],
                            travelMode='TRANSIT',
                            fields=['durationMillis', 'distanceMeters','path', 'legs']);
                        transitRoute.routes[0].legs[0].steps.forEach((step) => {
                            if (step.travelMode == 'WALKING') {
                                polylines.push(new Polyline({
                                    map: map,
                                    path: step.path,
                                }));
                            } else if (step.travelMode == 'TRANSIT') {
                                polylines.push(new Polyline({
                                    map: map,
                                    path: step.path,
                                    strokeColor: 'red',
                                }));
                            }
                        });
                    } else {
                        polylines.push(new Polyline({
                            map: map,
                            path: leg.path,
                        }));
                    }
                }           
            }
        }

        async function getRoute(origin, destination, intermediates=[], travelMode='WALKING', fields=['durationMillis', 'distanceMeters', 'path']){
            const {Route} = await google.maps.importLibrary("routes");
            const request = {
                origin: {lat:  parseFloat(origin.latitude), lng:  parseFloat(origin.longitude)},
                intermediates: intermediates,
                destination: {lat:  parseFloat(destination.latitude), lng:  parseFloat(destination.longitude)},
                fields: fields,
                travelMode: travelMode,
            };
            const route = await Route.computeRoutes(request);
            return route;
        }

        function clearPolylines(){
            polylines.forEach((polyline) => {polyline.setMap(null)});
            polylines = [];
        }
    </script>

    <style>
        .list-group-item {
            transition: all 0.3s ease;
        }

        .list-group-item:hover {
            opacity: 1 !important;
            transform: translateX(2px);
            background-color: lightgray;
        }

        .selected-item {
            opacity: 1 !important;
            transform: translateX(2px);
            background-color: lightgray;
        }
    </style>

}