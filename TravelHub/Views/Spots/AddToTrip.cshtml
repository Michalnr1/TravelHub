@using TravelHub.Domain.Entities
@model TravelHub.Web.ViewModels.Activities.SpotCreateEditViewModel

@{
    ViewData["Title"] = $"Add Spot to {ViewData["TripName"]}";
    var returnUrl = ViewData["ReturnUrl"] as string ?? Url.Action("Details", "Trips", new { id = Model.TripId });
    var apiKey = ViewData["GoogleApiKey"];
    var startLat = ViewData["Latitude"];
    var startLng = ViewData["Longitude"];
}

<h1>Add Spot to @ViewData["TripName"]</h1>
@if (ViewData["DayName"] != null)
{
    <h5 class="text-muted">Day: @ViewData["DayName"]</h5>
}

<hr />
<div class="row">
    <div class="col-md-6">
        <form asp-action="AddToTrip" asp-route-tripId="@Model.TripId">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="TripId" />

            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" id="name-input" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="DurationString" class="control-label"></label>
                <input asp-for="DurationString" class="form-control" type="time" step="300" />
                <span asp-validation-for="DurationString" class="text-danger"></span>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="Latitude" class="control-label"></label>
                        <input asp-for="Latitude" class="form-control" type="number" id="lat-input" step="0.0001" />
                        <span asp-validation-for="Latitude" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label asp-for="Longitude" class="control-label"></label>
                        <input asp-for="Longitude" class="form-control" type="number" id="lon-input" step="0.0001" />
                        <span asp-validation-for="Longitude" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Cost" class="control-label"></label>
                <input asp-for="Cost" class="form-control" type="number" step="0.01" />
                <span asp-validation-for="Cost" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Rating" class="control-label"></label>
                <select asp-for="Rating" class="form-control">
                    <option value="">-- Select Rating (Optional) --</option>
                    @foreach (var rating in Enum.GetValues(typeof(Rating)))
                    {
                        <option value="@rating">@rating</option>
                    }
                </select>
                <span asp-validation-for="Rating" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CategoryId" class="control-label"></label>
                <select asp-for="CategoryId" class="form-control">
                    <option value="">-- Select Category --</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="DayId" class="control-label"></label>
                <select asp-for="DayId" class="form-control">
                    <option value="">-- No specific day --</option>
                    @foreach (var day in Model.Days)
                    {
                        <option value="@day.Id">@day.Name</option>
                    }
                </select>
                <span asp-validation-for="DayId" class="text-danger"></span>
            </div>

            <div class="form-group mt-3">
                <input type="submit" value="Add Spot" class="btn btn-primary" />
                <a href="@returnUrl" class="btn btn-secondary">Back to Trip</a>
            </div>
        </form>
    </div>

    <div class="col-md-6">
        <div>
            <h2>Map</h2>
            <p>Api Key: @apiKey</p>
            <div class="place-autocomplete-card" id="card"></div>
            <div id="map" style="height:500px;width:100%;margin-top:10px;"></div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script async
            src="https://maps.googleapis.com/maps/api/js?key=@apiKey&libraries=places&callback=initMap">
    </script>

    <script>
        let map;

        let center = { lat: parseFloat("@Html.Raw(startLat)".replace(',', '.')), lng: parseFloat("@Html.Raw(startLng)".replace(',', '.')) };

        async function initMap() {
            // Request needed libraries.
            const [{ Map }, { Place }] = await Promise.all([
                google.maps.importLibrary("marker"),
                google.maps.importLibrary("places"),
            ]);

            // Initialize the map.
            map = new google.maps.Map(document.getElementById("map"), {
                    center: center,
                    zoom: 12,
            });

            //START
            const placeAutocomplete =
            new google.maps.places.PlaceAutocompleteElement();

            placeAutocomplete.id = "start";
            placeAutocomplete.locationBias = {center : center, radius : 5000};
            const card = document.getElementById("card");

            card.appendChild(placeAutocomplete);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(card);

                // marker = new google.maps.marker.AdvancedMarkerElement({
                //   map,
                // });
            infoWindow = new google.maps.InfoWindow({});

            placeAutocomplete.addEventListener("gmp-select", async ( {placePrediction} ) => {
                const place = placePrediction.toPlace();
                await place.fetchFields({
                    fields: ["displayName", "formattedAddress", "location"],
                });
                if (place.viewport) {
                    map.fitBounds(place.viewport);
                } else {
                    map.setCenter(place.location);
                    map.setZoom(13);
                }

                let content =
                    '<div id="infowindow-content">' +
                    '<span id="place-displayname" class="title">' +
                    place.displayName +
                    '</span><br />' +
                    '<span id="place-address">' +
                    place.formattedAddress +
                    '</span><br />' +
                    '<span id="place-coords">' +
                    place.location.lat() + ' ' + place.location.lng() +
                    '</span>' +
                    '</div>';

                updateInfoWindow(content, place.location);
                //marker.position = place.location;

                document.getElementById("name-input").value = place.displayName;
                document.getElementById("lat-input").value = Math.round(place.location.lat() * 10000) / 10000;
                document.getElementById("lon-input").value = Math.round(place.location.lng() * 10000) / 10000;


            });

            map.addListener("click", async (mapsMouseEvent) => {

                if (mapsMouseEvent.placeId){
                        let place = new Place({
                            id: mapsMouseEvent.placeId
                        });
                        await place.fetchFields({ fields: ['displayName'] });
                        document.getElementById("name-input").value = place.displayName;
                } else {
                    let content =
                        '<span id="place-coords">' +
                        JSON.stringify(mapsMouseEvent.latLng.toJSON().lat, null, 2) +
                        ", " +
                        JSON.stringify(mapsMouseEvent.latLng.toJSON().lng, null, 2) +
                        '</span>' +
                        '</div>';
                    updateInfoWindow(content, mapsMouseEvent.latLng);
                }

                document.getElementById("lat-input").value = Math.round(mapsMouseEvent.latLng.toJSON().lat * 10000) / 10000;
                document.getElementById("lon-input").value = Math.round(mapsMouseEvent.latLng.toJSON().lng * 10000) / 10000;

            });
        }

        function updateInfoWindow(content, center) {
            infoWindow.setContent(content);
            infoWindow.setPosition(center);
            infoWindow.open({
                map,
                //anchor: marker,
                shouldFocus: false,
            });
            }
    </script>

}