@* @model TravelHub.Web.ViewModels.Expenses.ExpenseCreateEditViewModel

@{
    ViewData["Title"] = "Add Expense to Trip";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Add Expense to Trip</h1>
    <a asp-controller="Trips" asp-action="Details" asp-route-id="@Model.TripId" class="btn btn-outline-secondary">Back to Trip</a>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

<div class="row">
    <div class="col-md-8">
        <form asp-action="AddToTrip">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Name" class="form-label"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="CategoryId" class="form-label">Category</label>
                        <select asp-for="CategoryId" class="form-control">
                            <option value="">-- Select Category --</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <!-- Money Section -->
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Value" class="form-label"></label>
                        <input asp-for="Value" class="form-control" type="number" step="0.01" />
                        <span asp-validation-for="Value" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="SelectedCurrencyCode" class="form-label">Currency</label>
                        <select asp-for="SelectedCurrencyCode" class="form-control" required>
                            <option value="">-- Select Currency --</option>
                            @foreach (var currency in Model.CurrenciesGroups)
                            {
                                <option value="@currency.Key">@currency.Name</option>
                            }
                        </select>
                        <span asp-validation-for="SelectedCurrencyCode" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Value" class="form-label"></label>
                        <input asp-for="Value" class="form-control" type="number" step="0.01" />
                        <span asp-validation-for="Value" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="PaidById" class="form-label">Paid By</label>
                <select asp-for="PaidById" class="form-control" required>
                    <option value="">-- Select Person --</option>
                    @foreach (var person in Model.People)
                    {
                        <option value="@person.Id">@person.FullName</option>
                    }
                </select>
                <span asp-validation-for="PaidById" class="text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label class="form-label">Participants</label>
                <div class="border rounded p-3">
                    @if (Model.People.Any())
                    {
                        foreach (var person in Model.People)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="SelectedParticipants" value="@person.Id" id="participant-@person.Id"
                                       @(Model.SelectedParticipants?.Contains(person.Id) == true ? "checked" : "") />
                                <label class="form-check-label" for="participant-@person.Id">
                                    @person.FullName
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No people available for this trip.</p>
                    }
                </div>

            </div>

            <input type="hidden" asp-for="TripId" />

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Add Expense</button>
                <a asp-controller="Trips" asp-action="Details" asp-route-id="@Model.TripId" class="btn btn-outline-secondary">Cancel</a>
            </div>
        </form>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Quick Tips</h5>
            </div>
            <div class="card-body">
                <ul class="list-unstyled">
                    <li>💡 Select all participants who should share this expense</li>
                    <li>💡 Choose the person who actually paid for the expense</li>
                    <li>💡 Use categories to organize your expenses</li>
                    <li>💡 Make sure to select the correct currency</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
} *@

@model TravelHub.Web.ViewModels.Expenses.ExpenseCreateEditViewModel

@{
    ViewData["Title"] = "Add Expense to Trip";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Add Expense to Trip</h1>
    <a asp-controller="Trips" asp-action="Details" asp-route-id="@Model.TripId" class="btn btn-outline-secondary">Back to Trip</a>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

<div class="row">
    <div class="col-md-8">
        <form asp-action="AddToTrip">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="Name" class="form-label"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label asp-for="CategoryId" class="form-label">Category</label>
                        <select asp-for="CategoryId" class="form-control">
                            <option value="">-- Select Category --</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group mb-3">
                        <label asp-for="Value" class="form-label"></label>
                        <input asp-for="Value" class="form-control" type="number" step="0.01" />
                        <span asp-validation-for="Value" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group mb-3">
                        <label asp-for="SelectedCurrencyCode" class="form-label">Currency @Model.CurrenciesGroups.Where(c => c.IsUsed).ToList().Count</label>
                        <select asp-for="SelectedCurrencyCode" class="form-control" id="currencySelect" required>
                            @{
                                var usedCurrencies = Model.CurrenciesGroups.Where(c => c.IsUsed).ToList();
                                var allCurrencies = Model.CurrenciesGroups.Where(c => !c.IsUsed).ToList();
                            }

                            @if (usedCurrencies.Any())
                            {
                                <optgroup label="-- Used Currency (Currency, Rate) --">
                                    @foreach (var currency in usedCurrencies)
                                    {
                                        // Opcja jest zaznaczona, jeśli pasuje do kursu i kodu wybranego w ViewModelu
                                        bool isSelected = (Model.SelectedCurrencyCode == currency.Key && Model.ExchangeRateValue == currency.ExchangeRate);

                                        <option value="@currency.Key"
                                                data-rate="@currency.ExchangeRate.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                                                selected="@isSelected">
                                            @currency.DropdownText
                                        </option>
                                    }
                                </optgroup>
                            }

                            <optgroup label="-- All currencies --">
                                @foreach (var currency in allCurrencies)
                                {
                                    <option value="@currency.Key"
                                            data-rate="@currency.ExchangeRate.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                                            selected="@(Model.SelectedCurrencyCode == currency.Key && Model.ExchangeRateValue == 1.0M)">
                                        @currency.DropdownText
                                    </option>
                                }
                            </optgroup>
                        </select>
                        <span asp-validation-for="SelectedCurrencyCode" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group mb-3">
                        <label asp-for="ExchangeRateValue" class="form-label">Exchange Rate (to Base)</label>
                        <input asp-for="ExchangeRateValue" class="form-control" type="number" step="0.000001" />
                        <span asp-validation-for="ExchangeRateValue" class="text-danger"></span>
                    </div>
                </div>
            </div>
            <div class="form-group mb-3">
                <label asp-for="PaidById" class="form-label">Paid By</label>
                <select asp-for="PaidById" class="form-control" required>
                    <option value="">-- Select Person --</option>
                    @foreach (var person in Model.People)
                    {
                        <option value="@person.Id">@person.FullName</option>
                    }
                </select>
                <span asp-validation-for="PaidById" class="text-danger"></span>
            </div>

            <div class="form-group mb-4">
                <label class="form-label">Participants</label>
                <div class="border rounded p-3">
                    @if (Model.People.Any())
                    {
                        foreach (var person in Model.People)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="SelectedParticipants" value="@person.Id" id="participant-@person.Id"
                                                           @(Model.SelectedParticipants?.Contains(person.Id) == true ? "checked" : "") />
                                <label class="form-check-label" for="participant-@person.Id">
                                    @person.FullName
                                </label>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted">No people available for this trip.</p>
                    }
                </div>
            </div>

            <input type="hidden" asp-for="TripId" />

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Add Expense</button>
                <a asp-controller="Trips" asp-action="Details" asp-route-id="@Model.TripId" class="btn btn-outline-secondary">Cancel</a>
            </div>
        </form>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Quick Tips</h5>
            </div>
            <div class="card-body">
                <ul class="list-unstyled">
                    <li>💡 Select all participants who should share this expense</li>
                    <li>💡 Choose the person who actually paid for the expense</li>
                    <li>💡 Use categories to organize your expenses</li>
                    <li>💡 Make sure to select the correct currency</li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            var $currencySelect = $('#currencySelect');
            var $exchangeRateInput = $('#ExchangeRateValue');

            // Funkcja do ustawiania kursu wymiany na podstawie atrybutu data-rate
            function setExchangeRate(selectedOption) {
                // Odczytujemy data-rate z wybranej opcji
                var rate = selectedOption.data('rate');

                // Ważne: Sprawdzamy, czy pole kursu jest już wypełnione (np. po błędzie walidacji).
                // Jeśli *nie* jest to stan po błędzie walidacji, ustawiamy domyślną stawkę.
                // Jeśli użytkownik wybierze opcję z kursu używanego (np. EUR, 4.2), nadpisujemy pole.

                // Ustawiamy kurs, tylko jeśli mamy go w data-rate, w przeciwnym razie domyślnie 1.0 (dla sekcji "Wszystkie waluty")
                if (rate) {
                    // parseFloat(rate) zapewnia, że konwersja zadziała, nawet jeśli używamy kropek dla liczb dziesiętnych (InvariantCulture)
                    $exchangeRateInput.val(parseFloat(rate).toFixed(6)); // Pokaż 6 miejsc po przecinku
                } else {
                    // To się nie powinno zdarzyć przy poprawnym ładowaniu, ale jako fallback:
                    $exchangeRateInput.val('1.000000');
                }
            }

            // 1. Ustaw domyślny kurs po załadowaniu strony
            // Ma to znaczenie, gdy ViewModel jest ładowany z domyślnymi wartościami z kontrolera (np. pierwsza waluta używana)
            var $initialSelectedOption = $currencySelect.find('option:selected');
            if ($initialSelectedOption.length > 0) {
                // Wstawienie do pola tekstowego wartości kursu z ViewModelu (jeśli jest),
                // ale upewniamy się, że to odpowiada wybranej opcji, aby być spójnym
                // Najbezpieczniej jest użyć wartości z `data-rate` z wybranej opcji jako wartości domyślnej
                var initialRateFromData = $initialSelectedOption.data('rate');

                // Tylko jeśli pole kursu jest puste LUB jest równe wartości 1.0 (czyli domyślnemu)
                // lub jeśli jest błąd walidacji, ale wartość z ViewModelu pasuje do wybranej opcji.
                // Lepsza strategia: zawsze ustawiamy kurs wymiany na podstawie wybranej opcji.
                // Wartość z ViewModelu zostanie i tak automatycznie wprowadzona przez Tag Helper,
                // ale jeśli użytkownik kliknie na opcję "EUR, 4.2", chcemy, aby pole `ExchangeRateValue`
                // natychmiast pokazało 4.2, niezależnie od tego, co było wcześniej.
                // Jednakże, aby obsłużyć stan po błędzie POST, pozostawiamy wartość z Tag Helper,
                // a JavaScript używamy tylko do obsługi zdarzenia `change`.

                // Jeżeli jest to świeże ładowanie, użyjemy domyślnego kursu z ViewModelu, a następnie z opcji.
                if ($exchangeRateInput.val() === '') {
                    setExchangeRate($initialSelectedOption);
                }
            }

            // 2. Obsługa zdarzenia zmiany
            $currencySelect.on('change', function () {
                var $selected = $(this).find('option:selected');
                setExchangeRate($selected);
            });
        });
    </script>
}
