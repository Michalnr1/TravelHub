@model TravelHub.Web.ViewModels.Notifications.CreateNotificationViewModel

@{
    ViewData["Title"] = "Create Notification";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">Create New Notification</h4>
                    <small class="text-muted">All times are in your local timezone</small>
                </div>
                <div class="card-body">
                    <form method="post" id="notificationForm">
                        @Html.AntiForgeryToken()

                        <!-- Title -->
                        <div class="mb-3">
                            <label asp-for="Title" class="form-label"></label>
                            <input asp-for="Title" class="form-control" placeholder="Enter notification title" />
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <!-- Content -->
                        <div class="mb-3">
                            <label asp-for="Content" class="form-label"></label>
                            <textarea asp-for="Content" class="form-control" rows="5"
                                      placeholder="Enter notification content..."></textarea>
                            <span asp-validation-for="Content" class="text-danger"></span>
                        </div>

                        <!-- Scheduled Date & Time -->
                        <div class="mb-4">
                            <label asp-for="ScheduledFor" class="form-label"></label>
                            <input asp-for="ScheduledFor" class="form-control" type="datetime-local" id="ScheduledForInput" />
                            <span asp-validation-for="ScheduledFor" class="text-danger"></span>
                            <div class="form-text">
                                <small class="text-info">Your timezone: <span id="userTimezone"></span></small>
                            </div>
                        </div>

                        <!-- Hidden fields for DateTimeOffset -->
                        <input type="hidden" id="ScheduledForDateTimeOffset" name="ScheduledForDateTimeOffset" />

                        <!-- Form Actions -->
                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary me-md-2">
                                <i class="fas fa-arrow-left"></i> Back to List
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-calendar-plus"></i> Schedule Notification
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('notificationForm');
            const scheduledForInput = document.getElementById('ScheduledForInput');
            const scheduledForDateTimeOffsetInput = document.getElementById('ScheduledForDateTimeOffset');
            const userTimezoneSpan = document.getElementById('userTimezone');

            // Pokaż strefę czasową użytkownika
            const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
            userTimezoneSpan.textContent = userTimezone;

            // Ustaw minimalną datę (1 minutę od teraz)
            const minTime = new Date();
            minTime.setMinutes(minTime.getMinutes() + 1);
            scheduledForInput.min = formatDateTimeForInput(minTime);

            // Ustaw domyślną wartość (1 minutę od teraz)
            const defaultTime = new Date();
            defaultTime.setMinutes(defaultTime.getMinutes() + 1);
            scheduledForInput.value = formatDateTimeForInput(defaultTime);

            // Ustaw początkową wartość DateTimeOffset
            updateDateTimeOffset(defaultTime);

            // Aktualizuj przy każdej zmianie
            scheduledForInput.addEventListener('change', function() {
                const localDate = parseLocalDateTime(this.value);
                updateDateTimeOffset(localDate);
            });

            // Custom validation for future date
            form.addEventListener('submit', function(e) {
                const localDate = parseLocalDateTime(scheduledForInput.value);
                const currentDate = new Date();

                if (localDate <= currentDate) {
                    e.preventDefault();
                    alert('Please select a future date and time.');
                    scheduledForInput.focus();
                    return false;
                }

                return true;
            });

            // Funkcja do parsowania daty z inputa datetime-local
            function parseLocalDateTime(dateTimeString) {
                if (!dateTimeString) return new Date();

                const [datePart, timePart] = dateTimeString.split('T');
                const [year, month, day] = datePart.split('-').map(Number);
                const [hours, minutes] = timePart.split(':').map(Number);

                return new Date(year, month - 1, day, hours, minutes);
            }

            // Funkcja aktualizująca DateTimeOffset
            function updateDateTimeOffset(localDate) {
                const timezoneOffset = localDate.getTimezoneOffset();
                const offsetHours = Math.abs(Math.floor(timezoneOffset / 60));
                const offsetMinutes = Math.abs(timezoneOffset % 60);
                const offsetSign = timezoneOffset <= 0 ? '+' : '-';
                const offsetString = `${offsetSign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;

                const year = localDate.getFullYear();
                const month = String(localDate.getMonth() + 1).padStart(2, '0');
                const day = String(localDate.getDate()).padStart(2, '0');
                const hours = String(localDate.getHours()).padStart(2, '0');
                const minutes = String(localDate.getMinutes()).padStart(2, '0');
                const seconds = String(localDate.getSeconds()).padStart(2, '0');

                const dateTimeOffsetString = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}${offsetString}`;
                scheduledForDateTimeOffsetInput.value = dateTimeOffsetString;
            }

            // Helper function to format date for datetime-local input
            function formatDateTimeForInput(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');

                return `${year}-${month}-${day}T${hours}:${minutes}`;
            }
        });
    </script>
}